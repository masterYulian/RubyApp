class Strings
end
#Регистронезависимая версия метода <=>.
"abcdef".casecmp("abcde")     #-> 1
"aBcDeF".casecmp("abcdef")    #-> 0
"abcdef".casecmp("abcdefg")   #-> -1
"abcdef".casecmp("ABCDEF")    #-> 0
#Если integer больше, чем str.length, то возвращает новую строку, длина которой равна integer,
# строка str располагается посередине, обитая символами строки padstr; иначе, возвращает str.
"hello".center(4)         #-> "hello"
"hello".center(20)        #-> "       hello        "
"hello".center(20, '123') #-> "1231231hello12312312"
#Создает версию строки str в которой все непечатные символы заменены на \nnn нотацию и все специальные символы экранированы.
"Hello world!\n".dump   #-> "\"Hello world!\\n\""
#Возвращает объект класса Symbol, который соответствует строке str.
"Koala".intern         #-> :Koala
s = 'cat'.intern       #-> :cat
s == :cat              #-> true
s = '@cat'.intern      #-> :@cat
s == :@cat             #-> true
#Рассматривает строку str как элемент символьной последовательности и возвращает следующий за строкой str элемент.
# Следующий элемент вычисляется увеличением кода крайнего правого элемента строки str на единицу.
"abcd".next        #-> "abce"
"THX1138".next     #-> "THX1139"
"<<koala>>".next   #-> "<<koalb>>"
"1999zzz".next     #-> "2000aaa"
"ZZZ9999".next     #-> "AAAA0000"
"***".next         #-> "**+"
"zzz".next         #-> "aaaa"
#Возвращает копию строки str, в которой удалены все ведущие пробельные символы.
"  hello  ".lstrip   #-> "  hello"
"hello".lstrip      #-> "hello"
#Возвращает копию строки str, в которой удалены все замыкающие пробельные символы.
"  hello  ".rstrip   #-> "  hello"
"hello".rstrip       #-> "hello"
#Возвращает копию строки str в которой удалены ведущие и замыкающие пробельные символы.
"    hello    ".strip   #-> "hello"
"\tgoodbye\r\n".strip   #-> "goodbye"
#Возвращает копию строки str в которой все символы нижнего регистра заменены на соответствующие символы верхнего и все символы верхнего регистра заменены на соответствующие символы нижнего.
"Hello".swapcase           #-> "hELLO"
"cYbEr_PuNk11".swapcase   #-> "CyBeR_pUnK11"
#Данный итератор проходит все значения между str и other_str включительно, передавая их в блок в качестве параметра.
"a8".upto("b6") {|s| print s, ' ' }
for s in "a8".."b6"
  print s, ' '
end