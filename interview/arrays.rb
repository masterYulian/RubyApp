class Arrays
end
a = Array.new(2, Hash.new)
a[0]['cat'] = 'feline'
a
a[1]['cat'] = 'Felix'
puts a
####
a = Array.new(2) { Hash.new }
a[0]['cat'] = 'feline'
p a

p ["a", "a", "c"] <=> ["a", "b", "c"]  #=> -1
p [1, 2, 3, 4, 5] <=> [1, 2, 3, 4, 5]  #=>  0
p [1, 2, 3, 4, 5] <=> [1, 2, 3, 4]     #=> +1

#Равенство — два массива считаются равными, если количество элементов и соответствующие пары элементов равны (используется метод==).

p ["a", "b"]    == ["a", "b", 5]    #=> false
p ["a", "b", 5] == ["a", "b", 5]    #=> true
p ["a", "b", 5] == ["a", "b", "c"]  #=> false
###########
# index in -1 it is last element, -2 previously last; [1..3] - mean start from
# 1 index and take 3 elements
a = ["a", "b", "c", "d", "e"]
a[2] + a[0] + a[1]     #=> "cab"
a[6]                   #=> nil
a[1, 2]                #=> ["b", "c"]
a[1..3]                #=> ["b", "c", "d"]
a[4..7]                #=> ["e"]
a[6..10]               #=> nil
a[-3, 3]               #=> ["c", "d", "e"]
# Специальные случаи:
a[5]                   #=> nil
a[5, 1]                #=> []
a[5..10]               #=> []

#Возвращает элемент массива array с индексом index. Отрицательная индексация подразумевает отсчет с конца массива. возвращаетnil,
# если индекс выходит за пределы допустимого дианазона.
a = ["a", "b", "c", "d", "e"]
a.at(0)   #=> "a"
a.at(-1)  #=> "e"
#####
# Ищет в двумерном массиве массив, первый элемент которого равен obj (для сравнения используется метод==).
# Возвращает первый найденный массив (то есть, ассоциированный массив) или nil, если таковой найти не удалось.

s1 = ["colors", "red", "blue", "green"]
s2 = ["letters", "a", "b", "c"]
s3 = "foo"
a  = [s1, s2, s3]
a.assoc("letters")  #=> ["letters", "a", "b", "c"]
a.assoc("foo")      #=> nil
### 
a = ["a", "b", "c", "d"]
a.collect do |x| x + "!" end #=> ["a!", "b!", "c!", "d!"]
a #=> ["a", "b", "c", "d"]

a = ["a", "b", "c", "d"]
a.collect! { |x| x + "!" }
a  #=> ["a!", "b!", "c!", "d!"]
#####
# Возвращает копию массива array из которого удалены все элементы nil.
########
ary = [1, 2, 4, 2]
ary.count                  #=> 4
ary.count(2)               #=> 2
ary.count { |x| x%2 == 0 } #=> 3
#########
a = ["a", "b", "b", "b", "c"]
a.delete("b")                  #=> "b"
a                              #=> ["a", "c"]
a.delete("z")                  #=> nil
a.delete("z") { "not found" }  #=> "not found"
##############
a = ["a", "b", "c"]
a.delete_if {|x| x >= "b" }  #=> ["a"]
a                            #=> ["a"]
#############
#Последние три формы вызова заполняют массив значением выражения в блоке block
# (в который передается индекс текущего заменяемого элемента).
a = ["a", "b", "c", "d"]
a.fill("x")             #=> ["x", "x", "x", "x"]
a.fill("z", 2, 2)       #=> ["x", "x", "z", "z"]
a.fill("y", 0..1)       #=> ["y", "y", "z", "z"]
a.fill {|i| i*i}        #=> [0, 1, 4, 9]
a.fill(-2) {|i| i*i*i}  #=> [0, 1, 8, 27]
#Возвращает первый элемент или первыеn элементов массива array.
# Если массив пуст, то для первой формы вызова (безn) возвращаетсяnil, а для второй — пустой массив.
a = ["q", "r", "s", "t"]
a.first     #=> "q"
a.first(1)  #=> ["q"]
a.first(3)  #=> ["q", "r", "s"]
#Преобразует многомерный массив array в одномерный.
s = [1, 2, 3]          #=> [1, 2, 3]
t = [4, 5, 6, [7, 8]]  #=> [4, 5, 6, [7, 8]]
a = [s, t, 9, 10]      #=> [[1, 2, 3], [4, 5, 6, [7, 8]], 9, 10]
a.flatten              #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#Вставляет полученные значения перед элементом индексом index (может быть отрицательным).
a = %w{ a b c d }
a.insert(2, 99)        #=> ["a", "b", 99, "c", "d"]
a.insert(-2, 1, 2, 3)  #=> ["a", "b", 99, "c", 1, 2, 3, "d"]
#Возвращает строку, созданную путем преобразования каждого элемента массива в строку, разделенных строкой sep.
["a", "b", "c" ].join       #=> "abc"
["a", "b", "c" ].join("-")  #=> "a-b-c"
#Возвращает новый массив, состоящий из элементов массива array, для которых значение внутри блока block равно false (или nil).
# Полезно взглянуть на итераторы delete_if и reject!, которые отличается лишь тем, что изменяют исходный массив
a = [1, 2, 3, 4, 5]
a.reject{ |item| item > 2 } #=> [1, 2]
a
#Возвращает индекс последнего вхождения элемента в массив array, который== obj. Возвращает nil,
# если такой элемент не был найден Простым языком - находит obj с конца.
a = ["a", "b", "b", "b", "c"]
a.rindex("b")  #=> 3
a.rindex("z")  #=> nil
###
a = ["d", "a", "e", "c", "b"]
a.sort                   #=> ["a", "b", "c", "d", "e"]
p a.sort {|x, y| y <=> x }  #=> ["e", "d", "c", "b", "a"]
#Подразумевает, что array является массивом массивов (то есть с размерностью больше, чем один)
# и меняет местами столбцы со строками (транспонирует).
a = [[1,2], [3,4], [5,6]]
a.transpose  #=> [[1, 3, 5], [2, 4, 6]]
#Возвращает новый массив, который получен из массива array путем удаления всех повторяющихся элементов
# (то есть остаются только «уникальные» элементы).
a = ["a", "a", "b", "b", "c"]
a.uniq   #=> ["a", "b", "c"]
#Добавляет элементы в начало массива array (со сдвигом вправо уже существующих).
# Данный метод изменяет исходный массив. Будьте внимательны!
a = ["b", "c", "d"]
a.unshift("a")   #=> ["a", "b", "c", "d"]
a.unshift(1, 2)  #=> [ 1, 2, "a", "b", "c", "d"]
a                #=> [ 1, 2, "a", "b", "c", "d"]
a = [4, 5, 6]
b = [7, 8, 9]
[1,2,3].zip(a, b)  #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
[1,2].zip(a,b)     #=> [[1, 4, 7], [2, 5, 8]]
a.zip([1,2],[8])   #=> [[4,1,8], [5,2,nil], [6,nil,nil]]